-- LTN-1000
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE DBO.SANPP_RF_VALORIZACAO_PRIVADOS_PRE
	(
	@DT_ICAL		DATETIME,
	@DT_FNAL		DATETIME,
	@GERAR_LOG_BATCH	CHAR(01) = 'N',		-- UTILIZADO NA VALORIZACAO BATCH, PARA GERAR O LOG DE PROGRESSO E ERROS
	@DT_PROCESSO		DATETIME = NULL	,	-- UTILIZADO NA VALORIZACAO BATCH, PARA GERAR O LOG DE PROGRESSO E ERROS
	@CONSIDERAR_RETROATIVAS	CHAR(01) = 'N'		-- UTILIZADO PARA VALORIZACAO BATCH, PARA VALORIZAR OPERACOES COM MOVIMENTOS RETROATIVOS (D-1)
	)


AS
BEGIN	-- RF2502.PRC


	CREATE TABLE #PRIVADOS_PRE
		(
		RF_CARACTERISTICA	CHAR(20),
		RFS_DATA		DATETIME,
		EH_RESERVA		CHAR(01),
		RFS_DATA_ANTERIOR	DATETIME,
		TIPO_ESTOQUE		CHAR(02),
		ESTOQUE_ORI		CHAR(02),
		CARAC_ORI		CHAR(20),
		FER_CHAVE		CHAR(15),
		EH_FUNDO		CHAR(01),
		MERCADO_1DIA		CHAR(01),
		TEM_TRANSF_CATEG	CHAR(01),
		ATV_AP			CHAR(01),
		IDX_CODIGO		CHAR(15),
		RF_DTCAUTELA		DATETIME,
		RF_EMISSAO		DATETIME,
		RF_VENCTO		DATETIME,
		RFX_PARTIDA		DATETIME,
		RFX_VOLTA		DATETIME,
		RFM_DATA_MIN		DATETIME,
		CTB_CURVA		CHAR(01),
		SGL_MEDA		CHAR(15),
		RFX_FCALC		CHAR(03),
		RFX_RESULTADO		CHAR(03),
		PU_PARTIDA		FLOAT,
		ATV_LOTE		FLOAT,
		DT_AQUISICAO		DATETIME,
		DU_EMIS_CALC		FLOAT,
		DU_EMIS_VCMT		FLOAT,
		DU_PRTD_VCMT		FLOAT,	-- PARTIDA E VENCIMENTO
		DU_CALC_VCMT		FLOAT,
		RFS_PRINCIPAL		FLOAT,
		RFS_QTDE		FLOAT,
		RFS_QTDE_C		FLOAT,
		RFS_FIN_C		FLOAT,
		RFS_QTDE_V		FLOAT,
		RFS_FIN_V		FLOAT,
		RFS_TAXA_MEDIA		FLOAT,
		RFS_TAXA_MEDIA_U	FLOAT,
		RFS_TAXA_MERCADO	FLOAT,
		RFS_PU_UTEIS		FLOAT,
		RFS_PU_CORRIDOS		FLOAT,
		RFS_PU_MERCADO		FLOAT,
		RFS_PU_MERCADO_ANT	FLOAT,
		RFS_IOF			FLOAT,
		IOF_C			FLOAT,
		IOF_V			FLOAT,
		VAR_CORRECAO		FLOAT,
		RFS_JUROS_ANT		FLOAT,
		RFS_CORRECAO_ANT	FLOAT,
		QTD_CTBL		FLOAT,
		PRINCIPAL_CTBL		FLOAT,
		PU_U_ANTERIOR		FLOAT,		-- UTILIZADO PARA CALCULO DO JUROS CONTABIL PARA FUNDOS
		PROVANT_ANTERIOR	FLOAT,
		PROVDIF_ANTERIOR	FLOAT,
		PROV_ANTERIOR		FLOAT,
		V_FATR_ACUD_UTES_ANT	FLOAT,
		V_FATR_ACUD_MERC_ANT	FLOAT,
		VALOR_CENARIO		FLOAT,
		CUPOM			FLOAT,
		PU_VENCTO		FLOAT
		)

	CREATE INDEX PRE_CARAC ON #PRIVADOS_PRE (RF_CARACTERISTICA, RFS_DATA)


	CREATE TABLE #DATAS
		(
		RFS_DATA	DATETIME
		)


	CREATE TABLE #QTAS_RESERVAS
		(
		ID_RG		INT IDENTITY(1, 1),
		DTINI		DATETIME,
		DTFIM		DATETIME,
		FORMA		CHAR(03),
		TIPO_FERIADO	CHAR(01),
		CHAVE		CHAR(15),
		RESERVAS	INT,
		NDFER		INT,
		WEEKS		INT,
		RESTO		INT,
		EOW		INT,
		INI_FERIFLAG	INT,
		FIM_FERIFLAG	INT
		)

	CREATE INDEX QTAS_DTINI ON #QTAS_RESERVAS (DTINI)
	CREATE INDEX QTAS_DTFIM ON #QTAS_RESERVAS (DTFIM)
	CREATE INDEX QTAS_RESRV ON #QTAS_RESERVAS (RESERVAS)

	CREATE TABLE #TMP_CENARIO(
		EH_FUNDO	CHAR(01),
		FER_CHAVE	CHAR(15),
		NDIAS_CENARIO	INT,
		SGL_MEDA	CHAR(15),
		RFS_DATA	DATETIME,
		RF_EMISSAO	DATETIME,
		RF_VENCTO	DATETIME,
		CEN_DATA_BASE	DATETIME,
		CEN_DATA	DATETIME,
		CEN_VALOR	FLOAT
	)


	CREATE TABLE #TMP_DATA_MINIMA(
		RF_CARACTERISTICA	CHAR(20),
		DT_MINIMA		DATETIME
	)


	-- TABELA PARA CALCULAR VARIACAO CDI (CUSTO DE CDI APLICADO EM OPERACOES COM RETROATIVIDADE DE CENARIO DIFERENTE DE D-0)
	CREATE TABLE #TMP_OPERACOES_DISTINTAS(
		FER_CHAVE		CHAR(15),
		IDX_CODIGO		CHAR(15),
		RF_EMISSAO		DATETIME,
		RF_VENCTO		DATETIME,
		RFX_PERC		FLOAT,
		RFS_DATA		DATETIME,
		RFS_DATA_UTIL		DATETIME,
		CDI_ACUMULADO		FLOAT,
		CDI_ACUMULADO_ANTERIOR	FLOAT,
		ULTIMA_COTACAO		FLOAT
	)


	DECLARE
		@RFS_DATA		DATETIME,
		@FLOAT_252		FLOAT,
		@FLOAT_360		FLOAT,
		@FLOAT_1		FLOAT,
		@FLOAT_0		FLOAT,
		@FLOAT_100		FLOAT,
		@DB_INATIVO		CHAR(30),
		@VDT_LIMPEZA		DATETIME,
		@CH_LIMPEZA		CHAR(08),
		@FER_CHAVE		CHAR(15),
		@VDT_ORIGINAL		DATETIME,
		@VDT_RESERVA_ANTERIOR	DATETIME,
		@VDT_PROXIMA_RESERVA	DATETIME,
		@NDIAS_CENARIO		INT,
		@DT_RESERVA_ANTERIOR	DATETIME,
		@SPID			INT
	
	-- BUSCA CODIGO DA CONEXAO PRINCIPAL

	SELECT	@SPID = SPID
	FROM
		#TMP_CONEXAO


	SELECT
		@RFS_DATA 	= 	@DT_ICAL,
		@FLOAT_252	=	CONVERT(FLOAT, 252),
		@FLOAT_360	=	CONVERT(FLOAT, 360),
		@FLOAT_0	=	CONVERT(FLOAT, 0),
		@FLOAT_1	=	CONVERT(FLOAT, 1),
		@FLOAT_100	=	CONVERT(FLOAT, 100)



	-- BUSCA BANCO DE DADOS INATIVO
	SELECT
		@DB_INATIVO = RTRIM(CN_PARM)
	FROM
		SANT515_GE_PARAMETRO (nolock)
	WHERE
		CH_PARM = 'DB_INATIVO'


	-- QUANDO FOR CONSIDERAR OPERACOES RETROATIVAS, CALCULA DIA UTIL ANTERIOR

	IF @CONSIDERAR_RETROATIVAS = 'S'
	BEGIN
		SELECT @DT_RESERVA_ANTERIOR = @RFS_DATA

		EXEC SIAN_SP_RESERVA_ANTERIOR	'SAFRABM',
						'A',
						@DT_RESERVA_ANTERIOR	OUTPUT,
						0

		SELECT @RFS_DATA = @DT_RESERVA_ANTERIOR
	END


	WHILE @RFS_DATA <= @DT_FNAL
	BEGIN
		INSERT INTO #DATAS
		SELECT @RFS_DATA

		SELECT @RFS_DATA = DATEADD(DAY, 1, @RFS_DATA)
	END

	-- BUSCA OPERACOES PRE

	INSERT INTO #PRIVADOS_PRE
		(
		RF_CARACTERISTICA,
		RFS_DATA,
		EH_RESERVA,
		RFS_DATA_ANTERIOR,
		TIPO_ESTOQUE,
		ESTOQUE_ORI,
		CARAC_ORI,
		FER_CHAVE,
		EH_FUNDO,
		MERCADO_1DIA,
		ATV_AP,
		IDX_CODIGO,
		RF_DTCAUTELA,
		RF_EMISSAO,
		RF_VENCTO,
		CTB_CURVA,
		SGL_MEDA,
		PU_PARTIDA,
		ATV_LOTE,
		DT_AQUISICAO,
		DU_EMIS_CALC,
		DU_EMIS_VCMT,
		DU_CALC_VCMT,
		RFS_PRINCIPAL,
		RFS_QTDE,
		RFS_QTDE_C,
		RFS_FIN_C,
		RFS_QTDE_V,
		RFS_FIN_V,
		RFS_TAXA_MEDIA,
		RFS_TAXA_MEDIA_U,
		RFS_TAXA_MERCADO,
		RFS_PU_UTEIS,
		RFS_PU_CORRIDOS,
		RFS_PU_MERCADO,
		VAR_CORRECAO,
		RFS_JUROS_ANT,
		RFS_CORRECAO_ANT,
		QTD_CTBL,
		PRINCIPAL_CTBL,
		PU_U_ANTERIOR,
		PROVANT_ANTERIOR,
		PROVDIF_ANTERIOR,
		PROV_ANTERIOR,
		V_FATR_ACUD_UTES_ANT,
		V_FATR_ACUD_MERC_ANT,
		RFS_IOF,
		VALOR_CENARIO,
		CUPOM,
		PU_VENCTO
		)
	EXEC ('
	SELECT
		A.RF_CARACTERISTICA,
		B.RFS_DATA,
		''S'',
		''1900-01-01'' RFS_DATA_ANTERIOR,
		A.TIPO_ESTOQUE,
		A.ESTOQUE_ORI,
		A.CARAC_ORI,
		A.FER_CHAVE,
		A.EH_FUNDO,
		A.MERCADO_1DIA,
		A.ATV_AP,
		A.IDX_CODIGO,
		A.RF_DTCAUTELA,
		A.RF_EMISSAO2,
		A.RF_VENCTO2,
		A.CTB_CURVA,
		A.SGL_MEDA,
		0.0,
		A.ATV_LOTE,
		A.DT_AQUISICAO,
		0	DU_EMIS_CALC,
		0	DU_EMIS_VCMT,
		0	DU_CALC_VCMT,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		1.0,			-- VAR_CORRECAO (PAPEIS PRE-FIXADOS NAO POSSUEM CORRECAO)
		0.0,			-- RFS_JUROS_ANT
		0.0,			-- RFS_CORRECAO_ANT
		0.0,			-- QTD_CTBL
		0.0,			-- PRINCIPAL_CTBL
		0.0,			-- PU_U_ANTERIOR
		0.0,			-- PROVANT_ANTERIOR
		0.0,			-- PROVDIF_ANTERIOR
		0.0,			-- PROV_ANTERIOR
		1.0,			-- V_FATR_ACUD_UTES_ANT
		1.0,			-- V_FATR_ACUD_MERC_ANT
		0.0,			-- RFS_IOF
		0.0,			-- VALOR_CENARIO
		A.CUPOM,
		0.0			--PU_VENCTO
	FROM
		#OPERACOES_GERAL	A,
		#DATAS			B
	WHERE
		A.IDX_PRE = ''S''
	')

	-- QUANDO FOR CONSIDERAR OPERACOES RETROATIVAS, MANTER AS DATAS ANTERIORES AO INICIO SOMENTE PARA AS OPERACOES MARCADAS

	IF @CONSIDERAR_RETROATIVAS = 'S'
	BEGIN
		DELETE	A
		FROM
			#PRIVADOS_PRE A
		JOIN	#OPERACOES_GERAL B
		ON	A.RF_CARACTERISTICA = B.RF_CARACTERISTICA
		WHERE
			ISNULL(B.TEM_MOVTO_RETROATIVO, 'N') = 'N'
		AND	A.RFS_DATA < @DT_ICAL
	END


	-- SE NAO EXISTIR NENHUM REGISTRO, SAI DA PROCEDURE

	IF NOT EXISTS(SELECT TOP 1 RF_CARACTERISTICA FROM #PRIVADOS_PRE)
	BEGIN
		RETURN
	END


	IF @GERAR_LOG_BATCH = 'S' AND EXISTS(SELECT SGL_T_RG FROM SANT1984_RF_CONTROLE_VALORIZACAO WITH(NOLOCK) WHERE DT_B = @DT_PROCESSO AND SGL_T_RG = 'CANCELAR' AND SPID = @SPID)
	BEGIN
		-- PROCESSO CANCELADO NA VALORIZACAO BATCH
		RETURN
	END


	-- CALCULA O PU DE PARTIDA

	UPDATE
		A
	SET
		SGL_MEDA = B.SGL_MEDA,
		RFX_FCALC = B.RFX_FCALC,
		DT_AQUISICAO = B.RFX_PARTIDA,
		RFX_PARTIDA = B.RFX_PARTIDA,
		RFX_VOLTA = B.RFX_VOLTA,
		RFX_RESULTADO = B.RFX_RESULTADO,
		PU_PARTIDA = (B.RFX_PRINCIPAL / B.RFX_QTDE)
	FROM
		#PRIVADOS_PRE	A,
		RF_INDEXACAO	B (nolock)
	WHERE
		A.CARAC_ORI = B.RF_CARACTERISTICA

	UPDATE #PRIVADOS_PRE SET ATV_LOTE = PU_PARTIDA WHERE ESTOQUE_ORI IN ('01', '02', '03') --WEVESAN
	
	-- EXCLUI AS DATAS ANTERIORES A COMPRA OU POSTERIORES AO VENCIMENTO

	DELETE FROM
		#PRIVADOS_PRE
	WHERE
		RFS_DATA < DT_AQUISICAO
	OR	RFS_DATA < RFX_PARTIDA

	DELETE FROM
		#PRIVADOS_PRE
	WHERE
		RFS_DATA > RF_VENCTO
	OR	RFS_DATA > RFX_VOLTA


	-- NA VALORIZACAO BATCH, DEVEM SER EXCLUIDOS AS DATAS QUE JA ESTIVEREM COM A COTA DE FUNDO LIBERADA

	IF @GERAR_LOG_BATCH = 'S'
	BEGIN
		-- EXCLUI AS DATAS ANTERIORES A COMPRA OU POSTERIORES AO VENCIMENTO
		DELETE	A
		FROM
			#PRIVADOS_PRE A
		JOIN	#OPERACOES_GERAL B
		ON	A.RF_CARACTERISTICA = B.RF_CARACTERISTICA
		WHERE
			B.EH_FUNDO = 'S'
		AND	A.RFS_DATA <= B.DT_ULTIMA_COTA_LIBERADA
	END


	-- CALCULA A QTDE DE DIAS UTEIS ENTRE A EMISSAO E A DATA DE CALCULO

	INSERT INTO #QTAS_RESERVAS
		(
		DTINI,
		DTFIM,
		FORMA,
		TIPO_FERIADO,
		CHAVE,
		RESERVAS,
		NDFER,
		WEEKS,
		RESTO,
		EOW,
		INI_FERIFLAG,
		FIM_FERIFLAG
		)
	SELECT
		RF_EMISSAO,
		RFS_DATA,
		'004',
		'A',
		FER_CHAVE,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0
	FROM
		#PRIVADOS_PRE
	WHERE
		RF_EMISSAO <> RFS_DATA
	GROUP BY
		RF_EMISSAO,
		RFS_DATA,
		FER_CHAVE


	EXEC SIAN_SP_QUANTAS_RESERVAS	'19000101',
					'19000101',
					'004',
					'A',
					'SAFRABM',
					0,
					'#QTAS_RESERVAS'

	UPDATE
		A
	SET
		DU_EMIS_CALC = B.RESERVAS
	FROM
		#PRIVADOS_PRE	A,
		#QTAS_RESERVAS	B
	WHERE
		A.RF_EMISSAO = B.DTINI
	AND	A.RFS_DATA   = B.DTFIM
	AND	A.FER_CHAVE  = B.CHAVE

	TRUNCATE TABLE #QTAS_RESERVAS


	-- CALCULA A QTDE DE DIAS UTEIS ENTRE A EMISSAO E O VENCTO

	INSERT INTO #QTAS_RESERVAS
		(
		DTINI,
		DTFIM,
		FORMA,
		TIPO_FERIADO,
		CHAVE,
		RESERVAS,
		NDFER,
		WEEKS,
		RESTO,
		EOW,
		INI_FERIFLAG,
		FIM_FERIFLAG
		)
	SELECT
		RF_EMISSAO,
		RF_VENCTO,
		'004',
		'A',
		FER_CHAVE,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0
	FROM
		#PRIVADOS_PRE
	GROUP BY
		RF_EMISSAO,
		RF_VENCTO,
		FER_CHAVE

	EXEC SIAN_SP_QUANTAS_RESERVAS	'19000101',
					'19000101',
					'004',
					'A',
					'SAFRABM',
					0,
					'#QTAS_RESERVAS'


	UPDATE
		A
	SET
		DU_EMIS_VCMT = B.RESERVAS,
		DU_PRTD_VCMT = B.RESERVAS
	FROM
		#PRIVADOS_PRE	A,
		#QTAS_RESERVAS	B
	WHERE
		A.RF_EMISSAO = B.DTINI
	AND	A.RF_VENCTO  = B.DTFIM
	AND	A.FER_CHAVE  = B.CHAVE

	TRUNCATE TABLE #QTAS_RESERVAS


	-- CALCULA A QTDE DE DIAS UTEIS ENTRE A PARTIDA E O VENCTO

	INSERT INTO #QTAS_RESERVAS
		(
		DTINI,
		DTFIM,
		FORMA,
		TIPO_FERIADO,
		CHAVE,
		RESERVAS,
		NDFER,
		WEEKS,
		RESTO,
		EOW,
		INI_FERIFLAG,
		FIM_FERIFLAG
		)
	SELECT
		RFX_PARTIDA,
		RF_VENCTO,
		'004',
		'A',
		FER_CHAVE,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0
	FROM
		#PRIVADOS_PRE
	WHERE
		RFX_PARTIDA	<>	RF_EMISSAO
	GROUP BY
		RFX_PARTIDA,
		RF_VENCTO,
		FER_CHAVE

	EXEC SIAN_SP_QUANTAS_RESERVAS	'19000101',
					'19000101',
					'004',
					'A',
					'SAFRABM',
					0,
					'#QTAS_RESERVAS'


	UPDATE
		A
	SET
		DU_PRTD_VCMT = B.RESERVAS
	FROM
		#PRIVADOS_PRE	A,
		#QTAS_RESERVAS	B
	WHERE
		A.RFX_PARTIDA = B.DTINI
	AND	A.RF_VENCTO = B.DTFIM
	AND	A.FER_CHAVE = B.CHAVE

	TRUNCATE TABLE #QTAS_RESERVAS


	-- CALCULA A QTDE DE DIAS UTEIS ENTRE A DATA DE CALCULO E O VENCTO

	INSERT INTO #QTAS_RESERVAS
		(
		DTINI,
		DTFIM,
		FORMA,
		TIPO_FERIADO,
		CHAVE,
		RESERVAS,
		NDFER,
		WEEKS,
		RESTO,
		EOW,
		INI_FERIFLAG,
		FIM_FERIFLAG
		)
	SELECT
		RFS_DATA,
		RF_VENCTO,
		'004',
		'A',
		FER_CHAVE,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0,
		@FLOAT_0
	FROM
		#PRIVADOS_PRE
	WHERE
		RFS_DATA <> RF_VENCTO
	GROUP BY
		RFS_DATA,
		RF_VENCTO,
		FER_CHAVE


	EXEC SIAN_SP_QUANTAS_RESERVAS	'19000101',
					'19000101',
					'004',
					'A',
					'SAFRABM',
					0,
					'#QTAS_RESERVAS'


	UPDATE
		A
	SET
		DU_CALC_VCMT = B.RESERVAS
	FROM
		#PRIVADOS_PRE	A,
		#QTAS_RESERVAS	B
	WHERE
		A.RFS_DATA = B.DTINI
	AND	A.RF_VENCTO = B.DTFIM
	AND	A.FER_CHAVE = B.CHAVE

	DROP TABLE #QTAS_RESERVAS


	-- PEGA A DATA MINIMA DE CADA CARACTERISTICA, AUMENTANDO O DESEMPENHO NO CRUZAMENTO COM A RF_SALDOS

	INSERT INTO #TMP_DATA_MINIMA
	SELECT
		RF_CARACTERISTICA,
		MIN(RFS_DATA)
	FROM
		#PRIVADOS_PRE
	GROUP BY
		RF_CARACTERISTICA


	IF @GERAR_LOG_BATCH = 'S' AND EXISTS(SELECT SGL_T_RG FROM SANT1984_RF_CONTROLE_VALORIZACAO WITH(NOLOCK) WHERE DT_B = @DT_PROCESSO AND SGL_T_RG = 'CANCELAR' AND SPID = @SPID)
	BEGIN
		-- PROCESSO CANCELADO NA VALORIZACAO BATCH
		RETURN
	END


	IF @GERAR_LOG_BATCH = 'S'
	BEGIN
		INSERT INTO SANT1984_RF_CONTROLE_VALORIZACAO (DT_B, SGL_T_RG, SPID, DT_H_ATC, TXT_DESC_EVE)
		VALUES (@DT_PROCESSO, 'MSG', @SPID, GETDATE(), 'Buscando Informacoes da Movimentacao (LOTE PRE)')
	END


	-- BUSCA A TAXA CALCULADA E O SALDO FECHAMENTO NA DATA ANTERIOR DE CADA OPERACAO

	UPDATE
		C
	SET
		RFS_DATA_ANTERIOR	=	B.RFS_DATA,
		RFS_TAXA_MEDIA		=	B.RFS_TAXA_MEDIA,
		RFS_TAXA_MEDIA_U	=	B.RFS_TAXA_MEDIA_U,
		RFS_QTDE		=	B.RFS_QTDE + B.RFS_QTDE_C - B.RFS_QTDE_V,	-- INICIALMENTE, TODOS OS REGISTROS FICARAO COM O SALDO ABERTURA DO PRIMEIRO DIA A SER VALORIZADO PARA CADA OPERACAO
		RFS_PU_MERCADO_ANT	=	B.RFS_PU_MERCADO,
		RFS_PRINCIPAL		=	B.RFS_PRINCIPAL,
		RFS_IOF			=	B.RFS_IOF,
		RFS_JUROS_ANT		=	B.RFS_APROPRIAR_ANT,
		RFS_CORRECAO_ANT	=	B.RFS_CORRECAO,
		PU_U_ANTERIOR		=	B.RFS_PU_UTEIS,
		PROVANT_ANTERIOR	=	B.RFS_PROVISAO_ANT,
		PROVDIF_ANTERIOR	=	B.RFS_PROVISAO_DIF,
		PROV_ANTERIOR		=	B.RFS_PROVISAO,
		V_FATR_ACUD_UTES_ANT	=	B.V_FATR_ACUD_UTES,
		V_FATR_ACUD_MERC_ANT	=	B.V_FATR_ACUD_MERC
	FROM
		#TMP_DATA_MINIMA	A
	JOIN	RF_SALDOS		B (nolock)
	ON	B.RFS_DATA		=	A.DT_MINIMA - 1
	AND	A.RF_CARACTERISTICA	=	B.RF_CARACTERISTICA
	JOIN	#PRIVADOS_PRE		C
	ON	A.RF_CARACTERISTICA	=	C.RF_CARACTERISTICA

	DROP TABLE #TMP_DATA_MINIMA


	-- BUSCA AS MOVIMENTACOES DO DIA

	UPDATE	A
	SET
		RFS_QTDE_C	=	(SELECT ISNULL(SUM(RFM_QTDE), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'A' AND RFM_OK = 'S'),
		RFS_FIN_C	=	(SELECT ISNULL(SUM(RFM_FINANCEIRO), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'A' AND RFM_OK = 'S'),
		RFS_QTDE_V	=	(SELECT ISNULL(SUM(RFM_QTDE), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'C' AND RFM_OK = 'S'),
		RFS_FIN_V	=	(SELECT ISNULL(SUM(RFM_FINANCEIRO), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'C' AND RFM_OK = 'S'),
		RFM_DATA_MIN	=	(SELECT MIN(RFM_DATA)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_OK = 'S'
						AND RFM_QTDE > 0),
		TEM_TRANSF_CATEG=	CASE
						WHEN EXISTS(SELECT TOP 1 RF_CARACTERISTICA
								FROM RF_MOVIMENTACAO (nolock)
								WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
									AND RFM_QTDE <> 0 AND RFM_DT = 'A'
									AND RFM_OK = 'S' AND ISNULL(CD_CATG_ORIG, 0) <> 0
							    ) THEN
							'S'
						ELSE
							'N'
					END,
		IOF_C		=	(SELECT ISNULL(SUM(RFM_IOF), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'A' AND RFM_OK = 'S'),
		IOF_V		=	(SELECT ISNULL(SUM(RFM_IOF), 0.0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_DT = 'C' AND RFM_OK = 'S'),
		QTD_CTBL	=	(SELECT ISNULL(SUM(RFM_QTDE),0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_OK = 'S' AND RFM_DT = CASE WHEN ATV_AP = 'A' THEN 'C' ELSE 'A' END
						AND ISNULL(IC_CLFC_ESTQ,'N') <> 'S'),
		PRINCIPAL_CTBL	=	(SELECT ISNULL(SUM(RFM_PRINCIPAL),0)
					FROM RF_MOVIMENTACAO (nolock)
					WHERE RF_CARACTERISTICA = A.RF_CARACTERISTICA AND RFM_DATA = A.RFS_DATA
						AND RFM_OK = 'S' AND RFM_DT = CASE WHEN ATV_AP = 'A' THEN 'C' ELSE 'A' END
						AND ISNULL(IC_CLFC_ESTQ,'N') <> 'S')
	FROM
		#PRIVADOS_PRE A



	-- ATUALIZA O SALDO ABERTURA DE CADA DIA A SER VALORIZADO (SOMA O SALDO ABERTURA COM A DIFERENCA ENTRE AS COMPRAS E VENDAS ANTERIORES A DATA)

	UPDATE	A
	SET	RFS_QTDE = A.RFS_QTDE + X.SALDO_LIQUIDO_ANTERIOR
	FROM
		#PRIVADOS_PRE A
	JOIN	(SELECT
			A.RF_CARACTERISTICA, A.RFS_DATA, ISNULL(SUM(B.RFS_QTDE_C), 0.0)-ISNULL(SUM(B.RFS_QTDE_V), 0.0) AS SALDO_LIQUIDO_ANTERIOR
		FROM
			#PRIVADOS_PRE	A
		JOIN	#PRIVADOS_PRE	B
		ON	A.RF_CARACTERISTICA = B.RF_CARACTERISTICA
		AND	B.RFS_DATA < A.RFS_DATA
		GROUP BY
			A.RF_CARACTERISTICA, A.RFS_DATA
		) AS X
	ON	A.RF_CARACTERISTICA = X.RF_CARACTERISTICA
	AND	A.RFS_DATA = X.RFS_DATA


	-- EXCLUI DATAS EM QUE NAO HA MAIS SALDO LIQUIDO (GERALMENTE QUANDO HA RESGATE FINAL ANTECIPADO)

	DELETE
	FROM
		#PRIVADOS_PRE
	WHERE
		ABS(RFS_QTDE)	<	0.01
	AND 	ABS(RFS_QTDE_C)	<	0.01
	AND 	ABS(RFS_QTDE_V)	<	0.01


	-- MARCA AS DATAS QUE NAO SAO RESERVA (FINAIS DE SEMANA OU FERIADOS)

	UPDATE	A
	SET	EH_RESERVA = 'N'
	FROM
		#PRIVADOS_PRE	A
	WHERE
		DATEPART(DW, A.RFS_DATA) IN (1, 7)
	OR	EXISTS(SELECT TOP 1 FER_TIPO FROM FERIADO WHERE FER_TIPO = 'A' AND FER_CHAVE = A.FER_CHAVE AND FER_DATA = A.RFS_DATA)



	UPDATE
		#PRIVADOS_PRE
	SET
		PU_VENCTO	=	CASE
						WHEN ATV_LOTE = 1 THEN 
							ATV_LOTE
						ELSE
							ATV_LOTE * POWER(1 + CUPOM / @FLOAT_100, DU_EMIS_VCMT / @FLOAT_252)
					END


	--SELECT * FROM #PRIVADOS_PRE
	-- CALCULA A TAXA PARA OPERACOES NOVAS
	UPDATE
		#PRIVADOS_PRE
	SET
--		RFS_TAXA_MEDIA		= (POWER(ATV_LOTE / PU_PARTIDA, @FLOAT_252 / DU_EMIS_VCMT) - @FLOAT_1) * @FLOAT_100,
		RFS_TAXA_MEDIA		= (POWER(PU_VENCTO / PU_PARTIDA, @FLOAT_252 / DU_PRTD_VCMT) - @FLOAT_1) * @FLOAT_100,
				
		RFS_TAXA_MEDIA_U	= CASE
						WHEN RFX_FCALC IN ('009', '022') THEN
--							(POWER(ATV_LOTE / PU_PARTIDA, @FLOAT_360 / CONVERT(FLOAT, DATEDIFF(DAY, RF_EMISSAO, RF_VENCTO))) - @FLOAT_1) * @FLOAT_100
							(POWER(PU_VENCTO / PU_PARTIDA, @FLOAT_360 / CONVERT(FLOAT, DATEDIFF(DAY, RFX_PARTIDA, RF_VENCTO))) - @FLOAT_1) * @FLOAT_100
						ELSE
							0.0
					  END
	FROM
		#PRIVADOS_PRE
	WHERE
		RFS_TAXA_MEDIA		=	0.0
	AND	RFS_TAXA_MEDIA_U	=	0.0


--SELECT RFS_TAXA_MEDIA, RFS_TAXA_MEDIA_U, * FROM #PRIVADOS_PRE

	IF @GERAR_LOG_BATCH = 'S'
	BEGIN
		INSERT INTO SANT1984_RF_CONTROLE_VALORIZACAO (DT_B, SGL_T_RG, SPID, DT_H_ATC, TXT_DESC_EVE)
		VALUES (@DT_PROCESSO, 'MSG', @SPID, GETDATE(), 'Buscando Cenarios (LOTE PRE)')
	END


	-- BUSCA DATA DA LIMPEZA DA TABELA CENARIO

	SELECT
		@VDT_LIMPEZA 	= 	ISNULL(MAX(DT_B), '19000101'),
		@CH_LIMPEZA	= 	CONVERT(CHAR(08), ISNULL(MAX(DT_B), '19000101'), 112)
	FROM
		SANT045_RF_LIMPEZA_ESTAT	A (nolock),
		SANT043_RF_LIMPEZA_TABELAS	B (nolock)
	WHERE
		A.CD_TAB	=	B.CD_TAB	AND
		A.ID_AMBT	=	'P'		AND
		B.NM_TAB	=	'CENARIO'


	IF @GERAR_LOG_BATCH = 'S' AND EXISTS(SELECT SGL_T_RG FROM SANT1984_RF_CONTROLE_VALORIZACAO WITH(NOLOCK) WHERE DT_B = @DT_PROCESSO AND SGL_T_RG = 'CANCELAR' AND SPID = @SPID)
	BEGIN
		-- PROCESSO CANCELADO NA VALORIZACAO BATCH
		RETURN
	END


	-- ALIMENTA TEMPORARIA COM OS CENARIOS A SEREM ENCONTRADOS

	INSERT INTO #TMP_CENARIO
	SELECT DISTINCT
		A.EH_FUNDO, A.FER_CHAVE, POS_DIA_CENARIO, A.SGL_MEDA, A.RFS_DATA, A.RF_EMISSAO, A.RF_VENCTO, A.RFS_DATA, A.RF_VENCTO, 0.0
	FROM
		#PRIVADOS_PRE A
	JOIN	POSICAO B (nolock)
	ON	A.FER_CHAVE	=	B.POS_APELIDO
	WHERE
		SGL_MEDA	<>	''


	-- LOOP PARA CALCULAR A PROXIMA RESERVA (FUNDOS) OU A RESERVA ANTERIOR (BS) QUANDO O VENCIMENTO NAO FOR DIA UTIL

	DECLARE curCEN_DATA CURSOR LOCAL READ_ONLY
	FOR
	SELECT DISTINCT
		A.FER_CHAVE, A.CEN_DATA
	FROM
		#TMP_CENARIO A
	WHERE
		DATEPART(DW, CEN_DATA) IN (1, 7)
	OR	EXISTS(SELECT FER_TIPO FROM FERIADO WHERE FER_TIPO = 'A' AND FER_CHAVE = A.FER_CHAVE AND FER_DATA = A.CEN_DATA)

	OPEN curCEN_DATA

	WHILE 1 = 1
	BEGIN
		FETCH NEXT FROM curCEN_DATA
		INTO	@FER_CHAVE,
			@VDT_ORIGINAL

		IF @@FETCH_STATUS <> 0
			BREAK

		SELECT
			@VDT_RESERVA_ANTERIOR	=	@VDT_ORIGINAL,
			@VDT_PROXIMA_RESERVA	=	@VDT_ORIGINAL


		EXEC SIAN_SP_PROXIMA_RESERVA	'A',
						@FER_CHAVE,
						@VDT_PROXIMA_RESERVA	OUTPUT,
						0

		EXEC SIAN_SP_RESERVA_ANTERIOR	@FER_CHAVE,
						'A',
						@VDT_RESERVA_ANTERIOR	OUTPUT,
						0

		UPDATE	#TMP_CENARIO
		SET	CEN_DATA 	=	CASE
							WHEN	EH_FUNDO = 'S' THEN
								@VDT_PROXIMA_RESERVA
							ELSE
								@VDT_RESERVA_ANTERIOR
						END
		WHERE
			FER_CHAVE	=	@FER_CHAVE
		AND	CEN_DATA	=	@VDT_ORIGINAL

	END

	CLOSE curCEN_DATA
	DEALLOCATE curCEN_DATA


	-- LOOP PARA CALCULAR A RESERVA ANTERIOR QUANDO A DATA BASE (DATA DE CALCULO) NAO FOR DIA UTIL

	DECLARE curCEN_DATA_BASE CURSOR LOCAL READ_ONLY
	FOR
	SELECT DISTINCT A.FER_CHAVE, A.CEN_DATA_BASE
	FROM
		#TMP_CENARIO A
	WHERE
		DATEPART(DW, CEN_DATA_BASE) IN (1, 7)
	OR	EXISTS(SELECT FER_TIPO FROM FERIADO WHERE FER_TIPO = 'A' AND FER_CHAVE = A.FER_CHAVE AND FER_DATA = A.CEN_DATA_BASE)

	OPEN curCEN_DATA_BASE

	WHILE 1 = 1
	BEGIN
		FETCH NEXT FROM curCEN_DATA_BASE
		INTO	@FER_CHAVE,
			@VDT_ORIGINAL

		IF @@FETCH_STATUS <> 0
			BREAK

		SELECT
			@VDT_RESERVA_ANTERIOR	=	@VDT_ORIGINAL


		EXEC SIAN_SP_RESERVA_ANTERIOR	@FER_CHAVE,
						'A',
						@VDT_RESERVA_ANTERIOR	OUTPUT,
						0

		UPDATE	#TMP_CENARIO
		SET	CEN_DATA_BASE	=	@VDT_RESERVA_ANTERIOR
		WHERE
			FER_CHAVE	=	@FER_CHAVE
		AND	CEN_DATA_BASE	=	@VDT_ORIGINAL

	END

	CLOSE curCEN_DATA_BASE
	DEALLOCATE curCEN_DATA_BASE


	-- CASO NAO EXISTA CENARIO NA DATA (D0), UTILIZA O CENARIO NO DIA UTIL ANTERIOR (D-1)

	UPDATE	A
	SET	NDIAS_CENARIO	=	-1
	FROM
		#TMP_CENARIO A
	WHERE
		A.NDIAS_CENARIO	=	0
	AND	A.CEN_DATA_BASE	>=	@VDT_LIMPEZA
	AND	NOT EXISTS(
			SELECT
				IDX_CODIGO
			FROM
				CENARIO
			WHERE
				IDX_CODIGO	=	A.SGL_MEDA
			AND	CEN_DATA_BASE	=	A.CEN_DATA_BASE
			AND	CEN_DATA	=	A.CEN_DATA
		)

	EXEC ('
	UPDATE	A
	SET	NDIAS_CENARIO	=	-1
	FROM
		#TMP_CENARIO A
	WHERE
		A.NDIAS_CENARIO	=	0
	AND	A.CEN_DATA_BASE	<	''' + @CH_LIMPEZA + '''
	AND	NOT EXISTS(
			SELECT
				IDX_CODIGO
			FROM
				' + @DB_INATIVO + '..CENARIO
			WHERE
				IDX_CODIGO	=	A.SGL_MEDA
			AND	CEN_DATA_BASE	=	A.CEN_DATA_BASE
			AND	CEN_DATA	=	A.CEN_DATA
		)
	')


	-- CALCULA A DATA BASE DO CENARIO, DE ACORDO COM A QUANTIDADE DE DIAS DE RETROATIVIDADE

	DECLARE curDIAS_CENARIO CURSOR LOCAL READ_ONLY
	FOR
	SELECT DISTINCT A.FER_CHAVE, A.CEN_DATA_BASE, A.NDIAS_CENARIO
	FROM
		#TMP_CENARIO A
	WHERE
		NDIAS_CENARIO	<>	0

	OPEN curDIAS_CENARIO

	WHILE 1 = 1
	BEGIN
		FETCH NEXT FROM curDIAS_CENARIO
		INTO	@FER_CHAVE,
			@VDT_ORIGINAL,
			@NDIAS_CENARIO

		IF @@FETCH_STATUS <> 0
			BREAK

		SELECT
			@VDT_RESERVA_ANTERIOR	=	@VDT_ORIGINAL


		EXEC SIAN_SP_DATA_FIN	@VDT_RESERVA_ANTERIOR	OUTPUT,
					@NDIAS_CENARIO,
					'A',
					@FER_CHAVE,
					0

		UPDATE	#TMP_CENARIO
		SET	CEN_DATA_BASE	=	@VDT_RESERVA_ANTERIOR
		WHERE
			FER_CHAVE	=	@FER_CHAVE
		AND	CEN_DATA_BASE	=	@VDT_ORIGINAL
		AND	NDIAS_CENARIO	=	@NDIAS_CENARIO

	END

	CLOSE curDIAS_CENARIO
	DEALLOCATE curDIAS_CENARIO


	-- INDICE PARA AUMENTAR O DESEMPENHO NO CRUZAMENTO COM A TABELA CENARIO

	CREATE INDEX IDX_CENARIO ON #TMP_CENARIO (SGL_MEDA, CEN_DATA_BASE, CEN_DATA)


	-- BUSCA A TAXA CENARIO

	UPDATE	A
	SET	CEN_VALOR	=	B.CEN_VALOR
	FROM
		#TMP_CENARIO A
	JOIN	CENARIO B
	ON
		A.SGL_MEDA	=	B.IDX_CODIGO
	AND	A.CEN_DATA_BASE	=	B.CEN_DATA_BASE
	AND	A.CEN_DATA	=	B.CEN_DATA
	WHERE
		A.CEN_DATA_BASE	>=	@VDT_LIMPEZA

	EXEC ('
	UPDATE	A
	SET	CEN_VALOR	=	B.CEN_VALOR
	FROM
		#TMP_CENARIO A
	JOIN	' + @DB_INATIVO + '..CENARIO B
	ON
		A.SGL_MEDA	=	B.IDX_CODIGO
	AND	A.CEN_DATA_BASE	=	B.CEN_DATA_BASE
	AND	A.CEN_DATA	=	B.CEN_DATA
	WHERE
		A.CEN_DATA_BASE	<	''' + @CH_LIMPEZA + '''
	')

	-- ATUALIZA A BASE DE ORIGEM COM A TAXA MERCADO ENCONTRADA

	UPDATE	A
	SET	RFS_TAXA_MERCADO=	B.CEN_VALOR
	FROM
		#PRIVADOS_PRE A
	JOIN	#TMP_CENARIO B
	ON	A.FER_CHAVE	=	B.FER_CHAVE
	AND	A.SGL_MEDA	=	B.SGL_MEDA
	AND	A.RFS_DATA	=	B.RFS_DATA
	AND	A.RF_EMISSAO	=	B.RF_EMISSAO
	AND	A.RF_VENCTO	=	B.RF_VENCTO
	WHERE
		A.SGL_MEDA	<>	''


	IF @GERAR_LOG_BATCH = 'S' AND EXISTS(SELECT SGL_T_RG FROM SANT1984_RF_CONTROLE_VALORIZACAO WITH(NOLOCK) WHERE DT_B = @DT_PROCESSO AND SGL_T_RG = 'CANCELAR' AND SPID = @SPID)
	BEGIN
		-- PROCESSO CANCELADO NA VALORIZACAO BATCH
		RETURN
	END


	-- CALCULA OS PUs (Uteis e Corridos)

	UPDATE
		#PRIVADOS_PRE
	SET
		RFS_PU_UTEIS	=	CASE
						WHEN RFS_DATA = RFX_PARTIDA THEN
							PU_PARTIDA
						WHEN RFX_FCALC IN ('009', '022') THEN
--							ATV_LOTE / POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, DU_CALC_VCMT / @FLOAT_252)
							PU_VENCTO / POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, DU_CALC_VCMT / @FLOAT_252)
						ELSE
--							ATV_LOTE / POWER(POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFX_PARTIDA, RF_VENCTO)) / @FLOAT_360), DU_CALC_VCMT / DU_PRTD_VCMT)
							PU_VENCTO / POWER(POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFX_PARTIDA, RF_VENCTO)) / @FLOAT_360), DU_CALC_VCMT / DU_PRTD_VCMT)

					END,
		RFS_PU_CORRIDOS	=	CASE
						WHEN RFS_DATA = RFX_PARTIDA THEN
							PU_PARTIDA
						WHEN RFX_FCALC IN ('009', '022') THEN
--							ATV_LOTE / POWER(RFS_TAXA_MEDIA_U / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFS_DATA, RF_VENCTO)) / @FLOAT_360)
							PU_VENCTO / POWER(RFS_TAXA_MEDIA_U / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFS_DATA, RF_VENCTO)) / @FLOAT_360)
						ELSE
--							ATV_LOTE / POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFS_DATA, RF_VENCTO)) / @FLOAT_360)
							PU_VENCTO / POWER(RFS_TAXA_MEDIA / @FLOAT_100 + @FLOAT_1, CONVERT(FLOAT, DATEDIFF(DAY, RFS_DATA, RF_VENCTO)) / @FLOAT_360)
					END
	FROM
		#PRIVADOS_PRE

--SELECT RFS_PU_UTEIS, * FROM #PRIVADOS_PRE
	-- CALCULA O PU MERCADO

	UPDATE
		#PRIVADOS_PRE
	SET
		RFS_PU_MERCADO	=	CASE
						WHEN RFX_RESULTADO = '005' OR (TIPO_ESTOQUE = '09' AND RFS_QTDE = 0.0 AND CTB_CURVA = 'C' AND RFS_DATA = RFM_DATA_MIN) THEN -- NESSE CASO, FORCA O PU CORRIDOS A SER REPLICADO
							RFS_PU_CORRIDOS
						WHEN RFX_RESULTADO = '007' OR (TIPO_ESTOQUE = '09' AND RFS_QTDE = 0.0 AND CTB_CURVA = 'U' AND RFS_DATA = RFM_DATA_MIN) THEN -- NESSE CASO, FORCA O PU UTEIS A SER REPLICADO
							RFS_PU_UTEIS
						WHEN EH_FUNDO = 'S' AND TEM_TRANSF_CATEG = 'S' THEN -- NESSE CASO, FORCA O PU UTEIS A SER REPLICADO
							RFS_PU_UTEIS
						WHEN SGL_MEDA <> '' AND (MERCADO_1DIA = 'S' OR (MERCADO_1DIA = 'N' AND RFS_DATA <> RF_DTCAUTELA)) THEN	-- POSSUI CENARIO, ENTAO CALCULA ATRAVES DA FORMULA ABAIXO (BASEADA NA PROC RF0367.PRC)
--							ATV_LOTE / POWER(RFS_TAXA_MERCADO / @FLOAT_100 + @FLOAT_1, DU_CALC_VCMT / @FLOAT_252)
							PU_VENCTO / POWER(RFS_TAXA_MERCADO / @FLOAT_100 + @FLOAT_1, DU_CALC_VCMT / @FLOAT_252)
						WHEN CTB_CURVA	=	'C'		THEN	-- REPLICA A CURVA CORRIDOS
							RFS_PU_CORRIDOS
						ELSE						-- REPLICA A CURVA UTEIS
							RFS_PU_UTEIS
					END
	FROM
		#PRIVADOS_PRE


	-- PREENCHE TEMPORARIA PARA CALCULO DA VARIACAO CDI (QUANDO NAO EXISTE CENARIO, DEVE-SE UTILIZAR O CENARIO DO DIA ANTERIOR E APLICAR A VARIACAO CDI DE UM DIA)

	INSERT INTO #TMP_OPERACOES_DISTINTAS
	SELECT DISTINCT
		A.FER_CHAVE, 'CDI', B.CEN_DATA_BASE, B.RFS_DATA, @FLOAT_100, B.RFS_DATA, B.RFS_DATA, 0.0, 0.0, 0.0
	FROM
		#PRIVADOS_PRE	A
	JOIN	#TMP_CENARIO	B
	ON	A.FER_CHAVE	=	B.FER_CHAVE
	AND	A.SGL_MEDA	=	B.SGL_MEDA
	AND	A.RFS_DATA	=	B.RFS_DATA
	AND	A.RF_EMISSAO	=	B.RF_EMISSAO
	AND	A.RF_VENCTO	=	B.RF_VENCTO
	WHERE
		A.SGL_MEDA	<>	''
	AND	B.NDIAS_CENARIO <>	0
	AND	(A.MERCADO_1DIA = 'S' OR (A.MERCADO_1DIA = 'N' AND A.RFS_DATA <> A.RF_DTCAUTELA))


	-- CHAMA ROTINA PARA CALCULAR A VARIACAO CDI

	EXEC SANPP_RF_CALC_VARIACAO_LOTE '#TMP_OPERACOES_DISTINTAS'


	-- ATUALIZA O PU MERCADO, APLICANDO O CUSTO DO CDI NO PU DO DIA ANTERIOR

	UPDATE	A
--	SET	RFS_PU_MERCADO	=	(A.ATV_LOTE / POWER(A.RFS_TAXA_MERCADO / @FLOAT_100 + @FLOAT_1, (A.DU_CALC_VCMT - B.NDIAS_CENARIO) / @FLOAT_252)) * C.CDI_ACUMULADO
	SET	RFS_PU_MERCADO	=	(A.PU_VENCTO / POWER(A.RFS_TAXA_MERCADO / @FLOAT_100 + @FLOAT_1, (A.DU_CALC_VCMT - B.NDIAS_CENARIO) / @FLOAT_252)) * C.CDI_ACUMULADO
	FROM
		#PRIVADOS_PRE	A
	JOIN	#TMP_CENARIO	B
	ON	A.FER_CHAVE	=	B.FER_CHAVE
	AND	A.SGL_MEDA	=	B.SGL_MEDA
	AND	A.RFS_DATA	=	B.RFS_DATA
	AND	A.RF_EMISSAO	=	B.RF_EMISSAO
	AND	A.RF_VENCTO	=	B.RF_VENCTO
	JOIN	#TMP_OPERACOES_DISTINTAS C
	ON	B.FER_CHAVE	=	C.FER_CHAVE
	AND	B.CEN_DATA_BASE =	C.RF_EMISSAO
	AND	B.RFS_DATA	=	C.RF_VENCTO
	AND	B.RFS_DATA	=	C.RFS_DATA
	WHERE
		A.SGL_MEDA	<>	''
	AND	B.NDIAS_CENARIO <>	0
	AND	(A.MERCADO_1DIA = 'S' OR (A.MERCADO_1DIA = 'N' AND A.RFS_DATA <> A.RF_DTCAUTELA))


	-- CASO NAO EXISTA CENARIO PARA CURVA MERCADO, REPLICA O PU

	UPDATE
		#PRIVADOS_PRE
	SET
		RFS_PU_MERCADO	=	CASE
						WHEN CTB_CURVA = 'C' THEN
							RFS_PU_CORRIDOS
						ELSE
							RFS_PU_UTEIS
					END
	FROM
		#PRIVADOS_PRE
	WHERE
		SGL_MEDA <> ''
	AND	(MERCADO_1DIA = 'S' OR (MERCADO_1DIA = 'N' AND RFS_DATA <> RF_DTCAUTELA))
	AND	RFS_TAXA_MERCADO = 0.0


	-- CALCULA O PU MERCADO ANTERIOR

	UPDATE	A
	SET	RFS_PU_MERCADO_ANT = B.RFS_PU_MERCADO,
		PU_U_ANTERIOR = B.RFS_PU_UTEIS
	FROM
		#PRIVADOS_PRE A
	JOIN	#PRIVADOS_PRE B
	ON	A.RF_CARACTERISTICA = B.RF_CARACTERISTICA
	AND	B.RFS_DATA = DATEADD(DAY, -1, A.RFS_DATA)


	-- CALCULA VALOR_CENARIO, PARA ALIMENTAR A TABELA RF_SALDOS_COTACAO

	UPDATE	A
	SET	VALOR_CENARIO	=	RFS_TAXA_MERCADO
	FROM
		#PRIVADOS_PRE	A
	WHERE
		A.EH_RESERVA = 'S'
	AND	A.SGL_MEDA <> ''


	-- ATUALIZA A TAXA NA RF_INDEXACAO PARA OPERACOES NOVAS

	UPDATE	B
	SET	RFX_TAXA = A.RFS_TAXA_MEDIA
	FROM
		#PRIVADOS_PRE	A
	JOIN	RF_INDEXACAO	B (nolock)
	ON	A.RF_CARACTERISTICA = B.RF_CARACTERISTICA
	WHERE
		A.RFS_DATA = A.RFX_PARTIDA


	-- INSERE OS DADOS NA TABELA DA PROC PRINCIPAL

	INSERT INTO #OPRC_LOTE
	(
		RF_CARACTERISTICA	,
		RFS_DATA		,
		EH_RESERVA		,
		RFS_DATA_ANTERIOR	,
		RFX_FCALC		,
		RFX_RESULTADO		,
		RFX_PARTIDA		,
		PU_PARTIDA		,
		RFX_PERC		,
		DU_EMIS_CALC		,
		DU_EMIS_VCMT		,
		DU_PRTD_VCMT		,
		DU_CALC_VCMT		,
		RFS_PRINCIPAL		,
		PRINCIPAL_ABERTURA	,
		RFS_QTDE		,
		RFS_QTDE_C		,
		RFS_FIN_C		,
		RFS_QTDE_V		,
		RFS_FIN_V		,
		RFS_TAXA_MEDIA		,
		RFS_TAXA_MEDIA_U	,
		RFS_TAXA_MERCADO	,
		RFS_PU_UTEIS		,
		RFS_PU_CORRIDOS		,
		RFS_PU_MERCADO		,
		RFS_PU_MERCADO_ANT	,
		V_PU_CTBL		,
		RFS_RESULTADO		,
		RFS_IOF			,
		IOF_C			,
		IOF_V			,
		VAR_CORRECAO		,
		RFS_JUROS		,
		RENDIMENTO		,
		FINANCEIRO_CURVA	,
		PROPORCIONAL_MOV	,
		QTD_PROPORCIONAL_MOV	,
		RFS_CORRECAO		,
		RFS_JUROS_ANT		,
		RFS_CORRECAO_ANT	,
		PGT_JUROS		,
		LC_SITUACAO		,
		RFS_APROPRIAR		,
		RFS_APROPRIAR_ANT	,
		IR_ABERTURA		,
		QTD_CTBL		,
		PRINCIPAL_CTBL		,
		PU_U_ANTERIOR		,
		RFS_AGDG		,
		RFS_AGDG_C		,
		RFS_AGDG_U		,
		RFS_AGDG_ANT		,
		RFS_PROVISAO_ANT	,
		RFS_PROVISAO_DIF	,
		RFS_PROVISAO		,
		RFS_PROVISAO_TRANSF	,
		PROVANT_ANTERIOR	,
		PROVDIF_ANTERIOR	,
		PROV_ANTERIOR		,
		V_FATR_ACUD_UTES_ANT	,
		V_FATR_ACUD_MERC_ANT	,
		V_FATR_ACUD_UTES	,
		V_FATR_ACUD_MERC	,
		PDD_FXA_SEQ		,
		V_PDD			,
		V_PZ_MDIO_CALD		,
		V_PZ_MDIO_AJTD		,
		V_DURT_CALD		,
		RFS_IOFR		,
		RFS_IR			,
		RFS_IR_ANT		,
		ULTIMA_COTACAO		,
		VALOR_CENARIO		,
		SGL_MEDA
	)
	SELECT
		RF_CARACTERISTICA	,
		RFS_DATA		,
		EH_RESERVA		,
		RFS_DATA_ANTERIOR	,
		RFX_FCALC		,
		RFX_RESULTADO		,
		RFX_PARTIDA		,
		PU_PARTIDA		,
		100.0			,	--RFX_PERC
		DU_EMIS_CALC		,
		DU_EMIS_VCMT		,
		DU_PRTD_VCMT		,
		DU_CALC_VCMT		,
		RFS_PRINCIPAL		,
		RFS_PRINCIPAL		,	--PRINCIPAL_ABERTURA
		RFS_QTDE		,
		RFS_QTDE_C		,
		RFS_FIN_C		,
		RFS_QTDE_V		,
		RFS_FIN_V		,
		RFS_TAXA_MEDIA		,
		RFS_TAXA_MEDIA_U	,
		RFS_TAXA_MERCADO	,
		RFS_PU_UTEIS		,
		RFS_PU_CORRIDOS		,
		RFS_PU_MERCADO		,
		RFS_PU_MERCADO_ANT	,
		CASE
			WHEN CTB_CURVA = 'M' THEN
				RFS_PU_MERCADO
			WHEN CTB_CURVA = 'U' THEN
				RFS_PU_UTEIS
			ELSE
				RFS_PU_CORRIDOS
		END AS V_PU_CTBL	,
		0.0			,	-- RFS_RESULTADO: CALCULADO POSTERIORMENTE
		RFS_IOF			,
		IOF_C			,
		IOF_V			,
		VAR_CORRECAO		,
		0.0			,	--RFS_JUROS
		0.0			,	--RENDIMENTO
		0.0			,	--FINANCEIRO_CURVA
		0.0			,	--PROPORCIONAL_MOV
		0.0			,	--QTD_PROPORCIONAL_MOV
		0.0			,	--RFS_CORRECAO
		RFS_JUROS_ANT		,
		RFS_CORRECAO_ANT	,
		0.0			,	--PGT_JUROS
		'A'			,	--LC_SITUACAO
		0.0			,	--RFS_APROPRIAR
		0.0			,	--RFS_APROPRIAR_ANT
		0.0			,	--IR_ABERTURA
		QTD_CTBL		,
		PRINCIPAL_CTBL		,
		PU_U_ANTERIOR		,
		0.0			,	--RFS_AGDG
		0.0			,	--RFS_AGDG_C
		0.0			,	--RFS_AGDG_U
		0.0			,	--RFS_AGDG_ANT
		0.0			,	--RFS_PROVISAO_ANT
		0.0			,	--RFS_PROVISAO_DIF
		0.0			,	--RFS_PROVISAO
		0.0			,	--RFS_PROVISAO_TRANSF
		PROVANT_ANTERIOR	,
		PROVDIF_ANTERIOR	,
		PROV_ANTERIOR		,
		V_FATR_ACUD_UTES_ANT	,
		V_FATR_ACUD_MERC_ANT	,
		1.0			,	--V_FATR_ACUD_UTES
		1.0			,	--V_FATR_ACUD_MERC
		0			,	--PDD_FXA_SEQ
		0.0			,	--V_PDD
		DBO.SANFS_RF_TRUNCAR(DATEDIFF(DAY, RFS_DATA, RF_VENCTO), 6),	--V_PZ_MDIO_CALD (TRUNCADO NA SEXTA CASA)
		DATEDIFF(DAY, RFS_DATA, RF_VENCTO),	--V_PZ_MDIO_AJTD
		DU_CALC_VCMT		,	--V_DURT_CALD (Diferenca em Dias Uteis da Data Atual ate o Vencimento)
		0.0			,	--RFS_IOFR
		0.0			,	--RFS_IR
		0.0			,	--RFS_IR_ANT
		0.0			,	--ULTIMA_COTACAO		,
		VALOR_CENARIO		,
		SGL_MEDA
	FROM
		#PRIVADOS_PRE
		
	
	IF @GERAR_LOG_BATCH = 'S'
	BEGIN
		INSERT INTO SANT1984_RF_CONTROLE_VALORIZACAO (DT_B, SGL_T_RG, SPID, DT_H_ATC, TXT_DESC_EVE)
		VALUES (@DT_PROCESSO, 'MSG', @SPID, GETDATE(), 'Calculo PRE Finalizado (LOTE)')
	END
END

